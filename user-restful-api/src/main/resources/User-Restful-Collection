{
	"info": {
		"_postman_id": "0665782a-a374-424a-b929-d107344888ef",
		"name": "User-Restful",
		"description": "# User-Restful API Collection\n\n## Overview\n\nThis Postman collection, named **User-Restful**, is designed to provide a comprehensive understanding of a RESTful API that manages user data. The API offers endpoints for creating, fetching, updating, and deleting user records. The collection includes predefined requests for testing and validating the functionality of each endpoint.\n\n## Collection Information\n\n- **Name**: User-Restful\n    \n- **Description**: Restful-api understanding using User Dummies\n    \n- **Schema**: [Postman Collection Schema v2.1.0](https://schema.getpostman.com/json/collection/v2.1.0/collection.json)\n    \n\n## Endpoints\n\n### 1\\. Create User\n\n- **Method**: POST\n    \n- **URL**: `http://localhost:7074/api/users/createUser`\n    \n- **Description**: Creates a new user with the provided `firstName`, `lastName`, and `email`.\n    \n- { \"firstName\": \"Michael\", \"lastName\": \"Michaels\", \"email\": \"[michael.michaels@example.com](https://mailto:michael.michaels@example.com)\"}\n    \n\n### 2\\. Fetch All Users\n\n- **Method**: GET\n    \n- **URL**: `http://localhost:7074/api/users/allUsers`\n    \n- **Description**: Retrieves a list of all users.\n    \n- **Tests**:\n    \n    - Status code is 200\n        \n    - Response contains fields `id`, `firstName`, `lastName`, and `email`\n        \n    - Email format validation\n        \n    - Content-Type is `application/json`\n        \n    - Response is a non-empty array\n        \n\n### 3\\. Fetch User By Id\n\n- **Method**: GET\n    \n- **URL**: `http://localhost:7074/api/users/fetchById?id=7`\n    \n- **Description**: Retrieves a user by their unique identifier.\n    \n- **Tests**:\n    \n    - Status code is 200\n        \n    - Response contains fields `id`, `firstName`, `lastName`, and `email`\n        \n    - Email format validation\n        \n    - Id is a non-negative integer\n        \n    - FirstName and LastName are non-empty strings\n        \n\n### 4\\. Fetch User by Name\n\n- **Method**: GET\n    \n- **URL**: `http://localhost:7074/api/users/fetchByName?name=Davis`\n    \n- **Description**: Retrieves users by their name.\n    \n- **Tests**:\n    \n    - Status code is 200\n        \n    - Content-Type is `application/json`\n        \n    - Response array structure validation\n        \n    - FirstName and LastName are non-empty strings\n        \n    - Email format validation\n        \n\n### 5\\. Fetch User by Email\n\n- **Method**: GET\n    \n- **URL**: `http://localhost:7074/api/users/fetchByEmail?email=david.williams@example.com`\n    \n- **Description**: Retrieves a user by their email address.\n    \n- **Tests**:\n    \n    - Status code is 200\n        \n    - Response contains fields `id`, `firstName`, `lastName`, and `email`\n        \n    - Email format validation\n        \n    - Content-Type is `application/json`\n        \n    - Id is a non-negative integer\n        \n\n### 6\\. Modify User\n\n- **Method**: PUT\n    \n- **URL**: `http://localhost:7074/api/users/modify?id=6`\n    \n- **Description**: Updates the details of an existing user identified by `id`.\n    \n- { \"id\": 6, \"firstName\": \"David\", \"lastName\": \"Davis\", \"email\": \"[david.williams@example.com](https://mailto:david.williams@example.com)\"}\n    \n\n### 7\\. Delete User\n\n- **Method**: DELETE\n    \n- **URL**: `http://localhost:7074/api/users/delete?id=3`\n    \n- **Description**: Deletes a user identified by `id`.\n    \n\n## How to Use\n\n1. Import the collection into Postman.\n    \n2. Ensure the server is running locally on port `7074`.\n    \n3. Use the predefined requests to interact with the API.\n    \n4. Validate responses using the built-in tests provided in the collection.\n    \n\n## Notes\n\n- The collection assumes the API is running on `localhost` with port `7074`.\n    \n- Modify the base URL in the requests if the server is hosted on a different address or port.\n    \n- The tests included in the collection help ensure the API endpoints are working correctly and that the response data adheres to expected formats and structures.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33080141"
	},
	"item": [
		{
			"name": "Create User",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 34,\r\n    \"firstName\": \"Simon\",\r\n    \"lastName\": \"Cowell2\",\r\n    \"email\": \"simon.cowell2@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:7074/api/users/createUser",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7074",
					"path": [
						"api",
						"users",
						"createUser"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, firstName, lastName, and email\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user).to.have.property('id');",
							"        pm.expect(user).to.have.property('firstName');",
							"        pm.expect(user).to.have.property('lastName');",
							"        pm.expect(user).to.have.property('email');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:7074/api/users/allUsers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7074",
					"path": [
						"api",
						"users",
						"allUsers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch User By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, firstName, lastName, and email\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('firstName');",
							"    pm.expect(responseData).to.have.property('lastName');",
							"    pm.expect(responseData).to.have.property('email');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.email).to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);",
							"});",
							"",
							"",
							"pm.test(\"Id should be a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"FirstName and LastName should be non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"FirstName should not be empty\");",
							"  pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"LastName should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:7074/api/users/fetchById?id=30",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7074",
					"path": [
						"api",
						"users",
						"fetchById"
					],
					"query": [
						{
							"key": "id",
							"value": "30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch User by Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the response array structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user).to.be.an('object');",
							"        pm.expect(user.id).to.be.a('number');",
							"        pm.expect(user.firstName).to.be.a('string');",
							"        pm.expect(user.lastName).to.be.a('string');",
							"        pm.expect(user.email).to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"First Name and Last Name must be non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First Name should not be empty\");",
							"    pm.expect(user.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last Name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:7074/api/users/fetchByName?name=Davis",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7074",
					"path": [
						"api",
						"users",
						"fetchByName"
					],
					"query": [
						{
							"key": "name",
							"value": "Davis"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch User by Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, firstName, lastName, and email\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('firstName');",
							"    pm.expect(responseData).to.have.property('lastName');",
							"    pm.expect(responseData).to.have.property('email');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"  pm.expect(responseData.id).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:7074/api/users/fetchByEmail?email=david.williams@example.com",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7074",
					"path": [
						"api",
						"users",
						"fetchByEmail"
					],
					"query": [
						{
							"key": "email",
							"value": "david.williams@example.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify User",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 6,\r\n    \"firstName\": \"David22\",\r\n    \"lastName\": \"Davis2222\",\r\n    \"email\": \"david.williams22222@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:7074/api/users/modify?id=6",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7074",
					"path": [
						"api",
						"users",
						"modify"
					],
					"query": [
						{
							"key": "id",
							"value": "6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:7074/api/users/delete?id=26",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7074",
					"path": [
						"api",
						"users",
						"delete"
					],
					"query": [
						{
							"key": "id",
							"value": "26"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Multiple Users",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"firstName\": \"Alice\",\r\n        \"lastName\": \"Johnson2\",\r\n        \"email\": \"alice.johnson2@example.com\"\r\n    },\r\n    {\r\n        \"firstName\": \"Bob\",\r\n        \"lastName\": \"Smith2\",\r\n        \"email\": \"bob.smith2@example.com\"\r\n    },\r\n    {\r\n        \"firstName\": \"Charlie\",\r\n        \"lastName\": \"Brown2\",\r\n        \"email\": \"charlie.brown2@example.com\"\r\n    },\r\n    {\r\n        \"firstName\": \"David\",\r\n        \"lastName\": \"Williams\",\r\n        \"email\": \"david.williams@example.com\"\r\n    },\r\n    {\r\n        \"firstName\": \"Emma\",\r\n        \"lastName\": \"Jones2\",\r\n        \"email\": \"emma.jones2@example.com\"\r\n    },\r\n    {\r\n        \"firstName\": \"Frank\",\r\n        \"lastName\": \"Garcia2\",\r\n        \"email\": \"frank.garcia2@example.com\"\r\n    },\r\n    {\r\n        \"firstName\": \"Grace\",\r\n        \"lastName\": \"Martinez2\",\r\n        \"email\": \"grace.martinez2@example.com\"\r\n    },\r\n    {\r\n        \"firstName\": \"Hannah\",\r\n        \"lastName\": \"Lopez2\",\r\n        \"email\": \"hannah.lopez2@example.com\"\r\n    },\r\n    {\r\n        \"firstName\": \"Isaac\",\r\n        \"lastName\": \"Gonzalez2\",\r\n        \"email\": \"isaac.gonzalez2@example.com\"\r\n    },\r\n    {\r\n        \"firstName\": \"Jack\",\r\n        \"lastName\": \"Wilson2\",\r\n        \"email\": \"jack.wilson2@example.com\"\r\n    },\r\n    {\r\n        \"firstName\": \"Kate\",\r\n        \"lastName\": \"Anderson2\",\r\n        \"email\": \"kate.anderson2@example.com\"\r\n    },\r\n    {\r\n        \"firstName\": \"Liam\",\r\n        \"lastName\": \"Thomas2\",\r\n        \"email\": \"liam.thomas2@example.com\"\r\n    }\r\n]\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:7074/api/users/addMultiple",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7074",
					"path": [
						"api",
						"users",
						"addMultiple"
					]
				}
			},
			"response": []
		},
		{
			"name": "Shut Down",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:7074/actuator/shutdown",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7074",
					"path": [
						"actuator",
						"shutdown"
					]
				}
			},
			"response": []
		}
	]
}